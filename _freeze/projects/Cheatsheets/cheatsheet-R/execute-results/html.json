{
  "hash": "1dfe0db9d2d918b00ccba73b42018c99",
  "result": {
    "markdown": "---\ntitle: \"Cheatsheet for R\"\nauthor: \"Yingying Yu\"\ndate: \"2023-12-10\"\ncategories: [R, Data analysis]\n---\n\n\n# Introduction\n\nDuring the process of data analysis, especially in **data wrangling** and **data visualization**, we often perform similar workflows to reach our target. For example, some functions within the `tidyverse` are really useful to do exploratory data analysis (EDA); to fit our data to a statistical model, we need to first transform our raw data to a specific form of data frame. In addition, we might have a preferred way to present our graphs from the result. This article summarized some of my routine commands, and this page would be keep updating for the future.\n\n# Data wrangling\n\n## Package `Tidyverse`\n\n::: callout-note\nThe package `Tidyverse` included different small packages, below are what I use frequently:\n\n| Name      | Core usage                   |\n|-----------|------------------------------|\n| `dplyr`   | Data manipulation            |\n| `tidyr`   | Tidy data                    |\n| `purrr`   | Replace loops                |\n| `stringr` | Convert strings              |\n| `forcats` | Handle categorical variables |\n\nMore `Tidyverse` packages can be found on this [website](https://www.tidyverse.org/packages/).\n:::\n\n------------------------------------------------------------------------\n\n### Package `dplyr`\n\nWhen we first uploaded our data, the first instinct to do is look it up, the `glimpse()` function provide the number of rows and columns of the data frame, as well as the types of data of every column.\n\nLet's use the 2020 U.S. Census data for example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\ncal <- readRDS( \"cal.RDS\" )\nglimpse(cal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 58\nColumns: 5\n$ GEOID    <chr> \"06001\", \"06003\", \"06005\", \"06007\", \"06009\", \"06011\", \"06013\"…\n$ NAME     <chr> \"Alameda County, California\", \"Alpine County, California\", \"A…\n$ variable <chr> \"medincome\", \"medincome\", \"medincome\", \"medincome\", \"medincom…\n$ estimate <dbl> 104888, 85750, 65187, 54972, 67054, 59427, 103997, 49981, 837…\n$ moe      <dbl> 1041, 23875, 4225, 2501, 4535, 5384, 1239, 5145, 2228, 929, 3…\n```\n:::\n:::\n\n\nOne of the most efficient way of using functions within the `dplyr` package is along with the pipe `%>%`. Since the function names are human-readable and easy to follow, stacking up the functions using pipe make your data wrangling process clean and concise. See an example below:\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}